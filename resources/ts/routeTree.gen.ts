/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const JobsIndexLazyImport = createFileRoute('/jobs/')()
const JobsFailedIndexLazyImport = createFileRoute('/jobs/failed/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const JobsIndexLazyRoute = JobsIndexLazyImport.update({
  path: '/jobs/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/jobs/index.lazy').then((d) => d.Route))

const JobsFailedIndexLazyRoute = JobsFailedIndexLazyImport.update({
  path: '/jobs/failed/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/jobs/failed/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/jobs/': {
      id: '/jobs/'
      path: '/jobs'
      fullPath: '/jobs'
      preLoaderRoute: typeof JobsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/jobs/failed/': {
      id: '/jobs/failed/'
      path: '/jobs/failed'
      fullPath: '/jobs/failed'
      preLoaderRoute: typeof JobsFailedIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/jobs': typeof JobsIndexLazyRoute
  '/jobs/failed': typeof JobsFailedIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/jobs': typeof JobsIndexLazyRoute
  '/jobs/failed': typeof JobsFailedIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/jobs/': typeof JobsIndexLazyRoute
  '/jobs/failed/': typeof JobsFailedIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/jobs' | '/jobs/failed'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/jobs' | '/jobs/failed'
  id: '__root__' | '/' | '/about' | '/jobs/' | '/jobs/failed/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  JobsIndexLazyRoute: typeof JobsIndexLazyRoute
  JobsFailedIndexLazyRoute: typeof JobsFailedIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  JobsIndexLazyRoute: JobsIndexLazyRoute,
  JobsFailedIndexLazyRoute: JobsFailedIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/jobs/",
        "/jobs/failed/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/jobs/": {
      "filePath": "jobs/index.lazy.tsx"
    },
    "/jobs/failed/": {
      "filePath": "jobs/failed/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
